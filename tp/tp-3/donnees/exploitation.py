import csv
import matplotlib.pyplot as plt
import numpy as np

def parse(nom):
    t = [] # temps (s)
    T = [] # temperature (°C)
    with open(f'{nom}.csv') as csvfile:
        lecteur = csv.reader(csvfile, delimiter=';')
        drapeau = False
        for ligne in lecteur:
            if not drapeau:
                drapeau = True
            else:
                t.append(float(ligne[0]))
                T.append(float(ligne[1]))
    return t, T

def moyenne_glissante(t, T, pas=1):
    t_moy = []
    T_moy = []
    for i in range(len(T)-pas):
        t_moy.append(sum(t[i+k] for k in range(pas)) / pas)
        T_moy.append(sum(T[i+k] for k in range(pas)) / pas)
    return np.array(t_moy), np.array(T_moy)

def trouve_t_fin(t):
    borne = 189 # s
    i = 0
    while t[i] < borne:
        i += 1
    return i, t[i]

sigma_naif = .5 / np.sqrt(3) # K

def ecart_type_naif(t, T, pas=1):
    return np.array([sigma_naif for _ in range(len(T)-pas)])

def ecart_type_glissant(t, T, pas=1):
    return np.array([np.std(T[i:i+pas]) for i in range(len(T)-pas)]) + sigma_naif / pas

def ecart_type_monte_carlo(t, T, pas=1):
    s = []
    N = 100
    for i in range(len(T)-pas):
        moyennes = []
        for k in range(N):
            moyennes.append(
                np.mean(T[i:i+pas] + np.random.uniform(
                    -sigma_naif, sigma_naif, pas)))
        s.append(np.std(moyennes))
    return np.array(s)

def ecart_type(t, T, methode='', pas=1):
    if methode == 'monte-carlo' or methode == 'mc':
        if __name__ == '__main__': print('Méthode Monte-Carlo')
        return ecart_type_monte_carlo(t, T, pas=pas)
    if methode == 'glissant' or methode == 'g':
        if __name__ == '__main__': print('Méthode glissante')
        return ecart_type_glissant(t, T, pas=pas)
    if __name__ == '__main__': print('Méthode naïve')
    return ecart_type_naif(t, T, pas=pas)

# Données d'origine
t_base, T1 = parse('plaque')
_, T2 = parse('proc')

# Moyennes glissantes
pas = 10
t, T_plaque = moyenne_glissante(t_base, T1, pas=pas)
_, T_proc = moyenne_glissante(t_base, T2, pas=pas)

# Écarts-type
s_T_plaque = ecart_type(t_base, T1, methode='mc', pas=pas)
s_T_proc = ecart_type(t_base, T2, methode='mc', pas=pas)
haut_plaque, bas_plaque = T_plaque + 2*s_T_plaque, T_plaque - 2*s_T_plaque
haut_proc, bas_proc = T_proc + 2*s_T_proc, T_proc - 2*s_T_proc

i_fin, t_fin = trouve_t_fin(t)
a, b = np.polyfit(t[i_fin:], T_proc[i_fin:], 1)


def plot():
    plt.rcParams.update({'font.size': 18})
    fig, ax = plt.subplots()
    # plt.axvline(x=t_fin, ls=':', color='purple')
    # ax.fill_between(t, bas_proc, haut_proc, color='b', alpha=.5, linewidth=0)
    # ax.fill_between(t, bas_plaque, haut_plaque, color='g', alpha=.5, linewidth=0)
    plt.plot(t, T_proc, color='b', label='Processeur')
    # plt.plot(t, T_proc, marker='+', ls='', color='b', label='Processeur')
    # plt.plot(t, a*t + b, color='orange', label='Processeur (régression)')
    # plt.title(f'Moyennes glissantes (pas de {pas}), écart-type par Monte-Carlo')
    plt.title(f'Moyennes glissantes sur n = {pas} points')
    # plt.title('Données brutes')
    plt.plot(t, T_plaque, color='g', label='Plaque chauffante')
    plt.xlabel('Temps (s)')
    plt.ylabel('Température (°C)')
    plt.legend()
    plt.show()


if __name__ == '__main__':
    print(f'Écart-type moyen (proc.) {np.mean(s_T_proc):.2f} °C')
    print(f'Écart-type moyen (plaque) {np.mean(s_T_plaque):.2f} °C')
    plot()
